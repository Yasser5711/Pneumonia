name: 🚀 Deploy Production (Client + Server)

on:
  workflow_dispatch:
permissions:
  contents: write
  pull-requests: write
  deployments: write
  statuses: write

jobs:
  check-monorepo:
    name: ✅ Check Monorepo (Lint + Tests)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🧰 Setup Yarn
        uses: ./.github/actions/setup-yarn
      - name: create env file
        working-directory: server
        run: |
          cat <<EOF > .env
          GITHUB_CLIENT_ID='test_client_id'
          GITHUB_CLIENT_SECRET='test_client_secret'
          GOOGLE_CLIENT_ID='test_google_client_id'
          GOOGLE_CLIENT_SECRET='test_google_client_secret'
          SESSION_SECRET='test_session_secret'
          EOF
      - name: 📦 Install Dependencies
        run: yarn install

      - name: 🧹 Run All Checks
        run: yarn check:all

      - name: 🧪 Run All Tests
        run: yarn check:test
  # db-migrate-detect:
  #   name: 🗄️ Detect DB Migrations
  #   runs-on: ubuntu-latest
  #   needs: check-monorepo
  #   environment:
  #     name: production
  #   outputs:
  #     db-migrations: ${{ steps.filter.outputs.db-migrations }}
  #   steps:
  #     - uses: dorny/paths-filter@v3
  #       id: filter
  #       with:
  #         filters: |
  #           db-migrations:
  #             - 'server/src/db/migrations/**'
  db-migrate:
    name: 🧬 Run DB Migrations
    runs-on: ubuntu-latest
    # needs: db-migrate-detect
    needs: check-monorepo
    environment:
      name: production
    # if: ${{ needs.db-migrate-detect.outputs.db-migrations == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: .
      - uses: ./.github/actions/setup-yarn
        with:
          working-directory: server

      - name: 🧬 Run DB Migrations
        working-directory: server
        run: |
          yarn db:push
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD_MIG }}
          NODE_ENV: preview
  deploy-server:
    name: 🚀 Deploy Backend to Render (Production)
    runs-on: ubuntu-latest
    needs:
      - check-monorepo
      # - db-migrate-detect
      - db-migrate
    # if: >
    #   ${{
    #     !needs.db-migrate.result || needs.db-migrate.result == 'success'
    #   }}
    environment:
      name: production

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Enable BuildKit
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: 🛠️ Build Docker image
        run: docker build --build-arg NODE_ENV=production -t ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-prod:${{ github.sha }} -f server/Dockerfile .

      - name: 🚀 Push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-prod:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-prod:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-prod:latest

      - name: 📤 Trigger Render Deploy Hook
        run: |
          echo "Deploying backend via Render hook..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_PROD }}"
      - name: ⏳ Wait for Render to be ready
        uses: ./.github/actions/wait-render-deploy
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID_PROD }}
          api_token: ${{ secrets.RENDER_API_KEY_PROD }}
  deploy-client:
    name: 🚀 Deploy Frontend to Netlify (Production)
    runs-on: ubuntu-latest
    needs: check-monorepo
    environment:
      name: production
    defaults:
      run:
        working-directory: client

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🧰 Setup Yarn
        uses: ./.github/actions/setup-yarn
        with:
          working-directory: client

      - name: 📦 Install Frontend Deps
        run: yarn install
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL_PROD }}
          VITE_API_KEY: ${{ secrets.VITE_API_KEY_PROD }}

      - name: 🛠️ Build Client
        run: yarn build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL_PROD }}
          VITE_API_KEY: ${{ secrets.VITE_API_KEY_PROD }}

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: "client/dist"
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Production deploy from GitHub Actions"
          netlify-config-path: "./netlify.toml"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PROD_SITE_ID }}

  create-release-pr:
    name: 🚀 Create Release PR (Changesets Auto Version)
    runs-on: ubuntu-latest
    needs: [deploy-client, deploy-server]
    environment:
      name: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Yarn
        uses: ./.github/actions/setup-yarn

      - name: 🛠️ Install dependencies
        run: yarn install

      - name: 📦 Create Changesets (automatically)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          yarn changeset version

          git add .
      # - name: 📝 Commit version changes
      #   run: |
      #     git commit -m "chore(release): version bump [skip ci]" || echo "No changes to commit"
      - name: 🚀 Create Pull Request for release
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: "chore(release): version bump [skip ci]"
          title: "chore(release): version bump for production"
          body: |
            _This PR bumps versions automatically based on Conventional Commits._
          branch: chore/auto-version-${{ github.run_id }}
          base: master
          labels: |
            release
          delete-branch: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  finalize:
    name: ✅ Finalize Production Deployment
    runs-on: ubuntu-latest
    needs:
      - check-monorepo
      # - db-migrate
      - deploy-server
      - deploy-client
      - create-release-pr
    environment:
      name: production
      url: https://pneumodetect.yassermekhfi.me
    if: ${{ success() }}
    steps:
      - name: ✅ All production steps succeeded
        run: echo "Production deployment complete."
