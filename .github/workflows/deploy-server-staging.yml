name: 🚀🧩 Deploy Server to Render (Staging)

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      environment:
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  deployments: write
  statuses: write

jobs:
  # db-migrate-detect:
  #   name: 🗄️ Detect DB Migrations
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: ${{ inputs.environment }}
  #   outputs:
  #     db-migrations: ${{ steps.filter.outputs.db-migrations }}
  #   steps:
  #     - uses: dorny/paths-filter@v3
  #       id: filter
  #       with:
  #         filters: |
  #           db-migrations:
  #             - 'server/src/db/migrations/**'
  db-migrate:
    name: 🧬 Run DB Migrations
    runs-on: ubuntu-latest
    # needs: db-migrate-detect
    environment:
      name: ${{ inputs.environment }}
    # if: ${{ needs.db-migrate-detect.outputs.db-migrations == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: .
      - uses: ./.github/actions/setup-yarn
        with:
          working-directory: server

      - name: create env file
        working-directory: server
        run: |
          cat <<EOF > .env
          GITHUB_CLIENT_ID='test_client_id'
          GITHUB_CLIENT_SECRET='test_client_secret'
          GOOGLE_CLIENT_ID='test_google_client_id'
          GOOGLE_CLIENT_SECRET='test_google_client_secret'
          SESSION_SECRET='test_session_secret'
          EOF
      - name: 🧬 Run DB Migrations
        working-directory: server
        run: |
          yarn db:push
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAG_MIG }}
          NODE_ENV: preview

  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    needs:
      - db-migrate
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create GitHub Deployment (start backend)
        id: server_deployment_start
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: "staging"
          desc: "Deploying backend to Render staging server"
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Enable BuildKit
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:${{ github.sha }} -f server/Dockerfile .

      - name: Push Docker image
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker tag ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:latest

      - name: 🚀 Trigger Render Deploy Hook
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_STAG }}"

      - name: ⏳ Wait for Render to be ready
        uses: ./.github/actions/wait-render-deploy
        with:
          service_id: ${{ secrets.RENDER_SERVICE_ID_STG }}
          api_token: ${{ secrets.RENDER_API_KEY_STG }}

      - name: ✅ Finish GitHub Deployment (success backend)
        if: success()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: "staging"
          status: "success"
          deployment_id: ${{ steps.server_deployment_start.outputs.deployment_id }}
          # env_url: ${{ secrets.SERVER_STAGING_URL }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: ❌ Finish GitHub Deployment (failure backend)
        if: failure()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: "staging"
          status: "failure"
          deployment_id: ${{ steps.server_deployment_start.outputs.deployment_id }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 💬 Comment Backend Deploy URL on PR
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: deploy-preview-server
          message: |
            🖥️ **Backend Staging Deploy**

            - 🖥️ **Backend (Render)**: [View Staging Server](${{ secrets.SERVER_STAGING_URL }}) (⚡ might take ~1 min to deploy)
