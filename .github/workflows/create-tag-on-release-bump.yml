name: 🏷️ Tag and Create Release After Version Bump

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - master
  # paths:
  #   - "package.json"
  #   - "package-lock.json"
  #   - "yarn.lock"
permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: 🧰 Setup Yarn
      #   uses: ./.github/actions/setup-yarn
      - name: Get latest tag
        run: |
          git fetch --tags
          echo "Latest tag: $(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | head -n 1)"
      - name: 📖 Read New Version
        id: new_version
        run: |
          VERSION=$(node -p "require('./server/package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: 📋 Generate Pretty PR-Based Changelog
        id: changelog
        shell: bash
        run: |
          git fetch --tags

          NEW_TAG="v${{ steps.new_version.outputs.version }}"
          LAST_TAG=$(git tag --sort=-creatordate | grep -v "^v${{ steps.new_version.outputs.version }}$" | head -n 1)

          echo "Generating changelog from $LAST_TAG to $NEW_TAG"

          echo "previous_tag=$LAST_TAG" >> "$GITHUB_ENV"
          echo "current_tag=$NEW_TAG" >> "$GITHUB_ENV"
      - name: 🏷️ Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag v${{ steps.new_version.outputs.version }}
          git push origin v${{ steps.new_version.outputs.version }}
      - name: ⏳ Wait for tag to propagate
        run: sleep 5

      - name: 📋 Fetch Changelog from GitHub PRs
        id: changelog_script
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { repo, owner } = context.repo;
            const base = process.env.previous_tag;
            const head = process.env.current_tag;

            const compare = await github.rest.repos.compareCommits({
              owner,
              repo,
              base,
              head
            });

            const lines = [];

            for (const commit of compare.data.commits) {
              const sha = commit.sha.substring(0, 7);
              let msg = commit.commit.message.split("\n")[0];
              if (/chore\(release\): version bump/.test(msg)) continue;
              const prMatch = msg.match(/\(#(\d+)\)/);
              const prNumber = prMatch ? prMatch[1] : null;
              msg = msg.replace(/\s*\(#\d+\)/g, '').trim();
              const prLink = prNumber ? `([#${prNumber}](https://github.com/${owner}/${repo}/pull/${prNumber}))` : '';
              let author = commit.author?.login ? `@${commit.author.login}` : commit.commit.author.name;
              const authorLink = commit.author?.login ? `[${author}](https://github.com/${commit.author.login})` : author;

              lines.push(`- ${sha} ${msg}${prLink} by ${authorLink}`);
            }

            lines.push(`\nFull Changelog: https://github.com/${owner}/${repo}/compare/${base}...${head}`);
            return lines.join('\n\n');

      - name: 🚀 Create GitHub Release with Beautiful Changelog
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Release v${{ steps.new_version.outputs.version }}
          body: |
            🎉 **New Production Release!**

            🔖 **Version**: v${{ steps.new_version.outputs.version }}

            ## 🚀 What's New
            ${{ steps.changelog_script.outputs.result }}

            ---
            _Auto-generated after merging release bump PR._
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
