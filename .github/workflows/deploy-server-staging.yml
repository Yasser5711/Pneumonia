name: Deploy Server to Render (Staging)

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      RENDER_DEPLOY_HOOK:
        required: true
      SERVER_STAGING_URL:
        required: true
      DATABASE_URL:
        required: true

permissions:
  contents: read
  pull-requests: write
  deployments: write
  statuses: write

jobs:
  db-migrate-detect:
    name: üóÑÔ∏è Detect DB Migrations
    runs-on: ubuntu-latest
    outputs:
      db-migrations: ${{ steps.filter.outputs.db-migrations }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            db-migrations:
              - 'server/src/db/migrations/**'
  db-migrate:
    name: üß¨ Run DB Migrations
    runs-on: ubuntu-latest
    needs: db-migrate-detect
    if: ${{ needs.db-migrate-detect.outputs.db-migrations == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-yarn
        with:
          working-directory: server
      - name: ‚ùå Fail if required secrets are missing
        run: |
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "Missing required secrets: DATABASE_URL"
            exit 1
          fi

      - name: create env file
        working-directory: server
        run: |
          echo "NODE_ENV=staging" > .env
          echo "DATABASE_URL="${{ secrets.DATABASE_URL }}"" >> .env
          echo "SALT_ROUNDS="${{ 12 }}"" >> .env
      - name: üß¨ Run DB Migrations
        working-directory: server
        run: |
          ls -la
          echo "Running DB migrations..."
          yarn db:push

  deploy:
    runs-on: ubuntu-latest
    if: ${{ needs.db-migrate.result == 'success' || needs.db-migrate.result == 'skipped' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Create GitHub Deployment (start backend)
        id: server_deployment_start
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: "staging"
          desc: "Deploying backend to Render staging server"
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Enable BuildKit
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:${{ github.sha }} -f server/Dockerfile .
      - name: Push Docker image
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker tag ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pneumoniacnn-staging:latest

      - name: Deploy to Render (Staging)
        run: |
          echo "Deploying to Render at: ${{ secrets.RENDER_DEPLOY_HOOK }}"
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
      - name: Finish GitHub Deployment (success backend)
        if: success()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: "staging"
          status: "success"
          deployment_id: ${{ steps.server_deployment_start.outputs.deployment_id }}
          env_url: ${{ secrets.SERVER_STAGING_URL }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Finish GitHub Deployment (failure backend)
        if: failure()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: "staging"
          status: "failure"
          deployment_id: ${{ steps.server_deployment_start.outputs.deployment_id }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Comment Backend Deploy URL on PR
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: deploy-preview-server
          message: |
            üñ•Ô∏è **Backend Staging Deploy**

            - üñ•Ô∏è **Backend (Render)**: [View Staging Server](${{ secrets.SERVER_STAGING_URL }}) (‚ö° might take ~1 min to deploy)

          # - name: üîç List applied migrations
          #   working-directory: server
          #   run: psql $DATABASE_URL -c "SELECT * FROM drizzle.__drizzle_migrations ORDER BY created_at DESC LIMIT 5;"
          #   env:
          #     DATABASE_URL: ${{ secrets.DATABASE_URL }}
