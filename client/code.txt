File: src\components\ChatMessage.vue
<script setup lang="ts">
import { CheckCheckIcon, CheckIcon } from "lucide-vue-next";
import { computed, ref } from "vue";
import type { Message } from "../types/chat";
import HoverImage from "./HoverImage.vue";
import ImageModal from "./ImageModal.vue";

const props = defineProps<{
  message: Message;
}>();

const showImageModal = ref(false);

const statusIcon = computed(() => {
  switch (props.message.status) {
    case "sent":
      return CheckIcon;
    case "delivered":
    case "read":
      return CheckCheckIcon;
    default:
      return null;
  }
});

const formattedTime = computed(() => {
  return new Intl.DateTimeFormat("en", {
    hour: "2-digit",
    minute: "2-digit",
  }).format(props.message.timestamp);
});
// onMounted(() => {
//   emit("mounted"); // or emit('messageRendered')
// });
</script>

<template>
  <div
    v-motion
    :class="[
      'flex w-full mb-4',
      message.sender === 'user' ? 'justify-end' : 'justify-start',
    ]"
    :initial="{ opacity: 0, y: 20 }"
    :enter="{ opacity: 1, y: 0 }"
  >
    <div
      :class="[
        'max-w-[70%] rounded-2xl px-4 py-2 glass-panel',
        message.sender === 'user'
          ? 'bg-primary/10 rounded-tr-sm'
          : 'bg-surface rounded-tl-sm',
        message.type === 'text' ? 'hover:scale-105' : '',
      ]"
    >
      <template v-if="message.type === 'text'">
        <p class="text-sm md:text-base">
          {{ message.content }}
        </p>
      </template>

      <template v-else-if="message.type === 'image'">
        <HoverImage
          :src="message.url"
          :alt="message.alt"
          class="max-h-[300px] rounded-lg"
          @click="showImageModal = true"
        />
      </template>

      <div class="flex items-center justify-end gap-1 mt-1">
        <span class="text-xs text-text/60">{{ formattedTime }}</span>
        <component
          :is="statusIcon"
          v-if="message.sender === 'user' && statusIcon"
          class="w-4 h-4 text-text/60"
        />
      </div>
    </div>

    <ImageModal
      v-if="message.type === 'image'"
      v-model="showImageModal"
      :src="message.url"
      :alt="message.alt"
    />
  </div>
</template>

================================================================================
File: src\components\ChatWindow.vue
<script setup lang="ts">
import { useChatScroll } from "../composables/useChatScroll";
import { useChatStore } from "../stores/chatStore";
import ChatMessage from "./ChatMessage.vue";
import ClockDisplay from "./ClockDisplay.vue";
import MessageInput from "./MessageInput.vue";
import ScrollToBottomButton from "./ScrollToBottomButton.vue";

const chatStore = useChatStore();

const { showScrollButton, scrollToBottom } = useChatScroll();
scrollToBottom(false);
</script>

<template>
  <div class="flex flex-col min-h-screen">
    <header class="bg-background p-4">
      <ClockDisplay />
    </header>

    <main class="p-4 space-y-4 flex flex-col grow">
      <TransitionGroup name="message">
        <div class="flex flex-col space-y-4 flex-grow">
          <ChatMessage
            v-for="message in chatStore.messages"
            :key="message.id"
            :message="message"
          />
        </div>
      </TransitionGroup>

      <!-- If no messages, center fallback block -->
      <div
        v-if="chatStore.messages.length === 0"
        class="flex-grow flex items-center justify-center text-text/40 text-sm"
      >
        Start a conversation ✨
      </div>

      <div
        v-if="chatStore.isTyping"
        class="flex items-center gap-2 text-text/60"
      >
        <div class="typing-indicator">
          <span />
          <span />
          <span />
        </div>
        <span class="text-sm">Assistant is typing...</span>
      </div>
    </main>

    <footer class="p-4 bg-background">
      <MessageInput />
    </footer>

    <ScrollToBottomButton
      :show="showScrollButton"
      :on-click="scrollToBottom"
    />
  </div>
</template>

<style scoped>
.typing-indicator {
  display: flex;
  gap: 2px;
}

.typing-indicator span {
  width: 4px;
  height: 4px;
  border-radius: 50%;
  background-color: currentColor;
  animation: bounce 1.4s infinite ease-in-out;
}

.typing-indicator span:nth-child(1) {
  animation-delay: -0.32s;
}
.typing-indicator span:nth-child(2) {
  animation-delay: -0.16s;
}

@keyframes bounce {
  0%,
  80%,
  100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
}
</style>

================================================================================
File: src\components\ClockDisplay.vue
<script setup lang="ts">
import { useClock } from "../composables/useClock";

const { timeParts, fullDate, toggleFormat } = useClock();
</script>

<template>
  <div
    class="font-mono text-base md:text-lg text-center cursor-pointer select-none group"
    :title="fullDate"
    @click="toggleFormat"
  >
    <span
      v-for="part in timeParts"
      :key="part.type"
    >
      <span
        v-if="part.type === 'literal' && part.value === ':'"
        class="animate-pulse inline-block px-0.5 group-hover:text-primary"
      >
        {{ part.value }}
      </span>
      <span v-else>
        {{ part.value }}
      </span>
    </span>
  </div>
</template>

<style scoped>
@media (prefers-reduced-motion: reduce) {
  .animate-pulse {
    animation: none !important;
  }
}
</style>

================================================================================
File: src\components\HelloWorld.vue
<script setup lang="ts">
import { ref } from 'vue'

defineProps<{ msg: string }>()

const count = ref(0)
</script>

<template>
  <h1>{{ msg }}</h1>

  <div class="card">
    <button type="button" @click="count++">count is {{ count }}</button>
    <p>
      Edit
      <code>components/HelloWorld.vue</code> to test HMR
    </p>
  </div>

  <p>
    Check out
    <a href="https://vuejs.org/guide/quick-start.html#local" target="_blank"
      >create-vue</a
    >, the official Vue + Vite starter
  </p>
  <p>
    Learn more about IDE Support for Vue in the
    <a
      href="https://vuejs.org/guide/scaling-up/tooling.html#ide-support"
      target="_blank"
      >Vue Docs Scaling up Guide</a
    >.
  </p>
  <p class="read-the-docs">Click on the Vite and Vue logos to learn more</p>
</template>

<style scoped>
.read-the-docs {
  color: #888;
}
</style>

================================================================================
File: src\components\HoverImage.vue
<script setup lang="ts">
import { useIntersectionObserver } from "@vueuse/core";
import { EyeIcon } from "lucide-vue-next";
import { ref } from "vue";

defineProps<{
  src: string;
  alt?: string;
  // view?: () => void;
}>();

const imageRef = ref<HTMLImageElement | null>(null);
const isVisible = ref(false);
const isLoaded = ref(false);

// Lazy loading with IntersectionObserver
useIntersectionObserver(imageRef, ([{ isIntersecting }]) => {
  if (isIntersecting) {
    isVisible.value = true;
  }
});

const handleLoad = () => {
  isLoaded.value = true;
};
</script>

<template>
  <div class="relative group cursor-pointer overflow-hidden max-w-full">
    <img
      ref="imageRef"
      :src="isVisible ? src : ''"
      :alt="alt"
      class="transition-all duration-300 object-contain rounded-lg max-w-full max-h-[300px] md:group-hover:blur-sm md:group-hover:scale-105"
      :class="{ 'opacity-0': !isLoaded }"
      @load="handleLoad"
    >

    <div
      class="absolute inset-0 flex items-center justify-center opacity-0 md:group-hover:opacity-100 transition-opacity duration-300 bg-black/20"
    >
      <EyeIcon class="w-8 h-8 text-white drop-shadow-lg" />
    </div>
  </div>
</template>

================================================================================
File: src\components\ImageModal.vue
<script setup lang="ts">
import { XIcon } from "lucide-vue-next";
import { VueFinalModal } from "vue-final-modal";

defineProps<{
  modelValue: boolean;
  src: string;
  alt?: string;
}>();

const emit = defineEmits<{
  (e: "update:modelValue", value: boolean): void;
}>();

const close = () => emit("update:modelValue", false);
</script>

<template>
  <VueFinalModal
    :model-value="modelValue"
    class="flex items-center justify-center"
    content-class="bg-transparent shadow-none p-0 max-w-[90vw] max-h-[90vh] rounded-lg relative group"
    overlay-transition="vfm-fade"
    content-transition="vfm-fade"
    overlay-class="bg-black/40 backdrop-blur-lg"
    lock-scroll
    fit-parent
    click-to-close
    swipe-to-close="up"
    @update:model-value="emit('update:modelValue', $event)"
  >
    <!-- Close Button (outside image) -->
    <button
      class="absolute -top-4 -right-4 z-10 p-2 rounded-full bg-black/50 text-white backdrop-blur-sm hover:bg-black/70 transition-opacity opacity-0 group-hover:opacity-100 md:opacity-0 md:group-hover:opacity-100"
      @click="close"
    >
      <XIcon class="w-6 h-6" />
    </button>

    <!-- Image Centered -->
    <div class="flex items-center justify-center w-full h-full">
      <img
        :src="src"
        :alt="alt"
        class="rounded-lg object-contain max-w-full max-h-[90vh]"
      >
    </div>
  </VueFinalModal>
</template>

================================================================================
File: src\components\ImagePreview.vue
<script setup lang="ts">
import { XIcon } from "lucide-vue-next";
import { ref } from "vue";

const props = defineProps<{
  file: File;
  progress?: number;
  onRemove: () => void;
}>();

const imageUrl = ref<string>("");
const isLoading = ref(true);

// Create preview URL
const reader = new FileReader();
reader.onload = (e) => {
  imageUrl.value = e.target?.result as string;
  isLoading.value = false;
};
reader.readAsDataURL(props.file);
</script>

<template>
  <div class="relative group w-24 h-24">
    <!-- Preview while loading -->
    <div
      v-if="isLoading"
      class="w-full h-full rounded-lg bg-surface animate-pulse"
    />

    <!-- Final image -->
    <div
      v-else
      class="relative w-full h-full"
    >
      <img
        :src="imageUrl"
        :alt="file.name"
        class="w-full h-full rounded-lg object-cover border border-white/20"
        :class="{
          'blur-[2px] opacity-50': progress !== undefined && progress < 100,
        }"
      >

      <!-- Centered Loader Overlay -->
      <div
        v-if="progress !== undefined && progress < 100"
        class="absolute inset-0 flex items-center justify-center z-10 pointer-events-none"
      >
        <div class="flex flex-col items-center gap-1">
          <svg
            class="w-6 h-6 text-primary animate-spin"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"
              fill="none"
            />
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            />
          </svg>
          <span class="text-xs font-medium text-primary">
            {{ Math.round(progress) }}%
          </span>
        </div>
      </div>

      <!-- Top-right Close Button (not stretching the row) -->
      <button
        class="absolute top-1 right-1 p-1.5 rounded-full bg-surface shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-20"
        @click="onRemove"
      >
        <XIcon class="w-4 h-4" />
      </button>
    </div>
  </div>
</template>

================================================================================
File: src\components\MessageInput.vue
<script setup lang="ts">
import { ImagePlus, SendIcon } from "lucide-vue-next";
import { storeToRefs } from "pinia";
import { onMounted, onUnmounted, ref } from "vue";
import { useChatStore } from "../stores/chatStore";
import ImagePreview from "./ImagePreview.vue";
const chatStore = useChatStore();
const { isTyping } = storeToRefs(chatStore);
const messageInput = ref("");
const fileInput = ref<HTMLInputElement | null>(null);
const pendingImage = ref<File | null>(null);
const dragOver = ref(false);
const uploadProgress = ref(0);

const handlePaste =  (e: ClipboardEvent) => {
  const items = e.clipboardData?.items;
  if (!items) return;

  for (const item of items) {
    if (item.type.startsWith("image/")) {
      const file = item.getAsFile();
      if (file && isValidImage(file)) {
        pendingImage.value = file;
        break;
      }
    }
  }
};

const handleDrop = (e: DragEvent) => {
  e.preventDefault();
  dragOver.value = false;

  const file = e.dataTransfer?.files[0];
  if (file && isValidImage(file)) {
    pendingImage.value = file;
  }
};

const handleFileSelect = (e: Event) => {
  const file = (e.target as HTMLInputElement).files?.[0];
  if (file && isValidImage(file)) {
    pendingImage.value = file;
  }
};

const isValidImage = (file: File) => {
  const validTypes = ["image/jpeg", "image/png", "image/webp"];
  return validTypes.includes(file.type);
};

const removePendingImage = () => {
  pendingImage.value = null;
  uploadProgress.value = 0;
  if (fileInput.value) {
    fileInput.value.value = "";
  }
};

const simulateUploadProgress = () => {
  uploadProgress.value = 0;
  const interval = setInterval(() => {
    if (uploadProgress.value < 90) {
      uploadProgress.value += Math.random() * 30;
    }
    if (uploadProgress.value >= 90) {
      clearInterval(interval);
    }
  }, 200);
  return interval;
};

const sendMessage =  () => {
  if (pendingImage.value) {
    const progressInterval = simulateUploadProgress();
    const reader = new FileReader();
    reader.onload = (e) => {
      // Simulate network delay
      setTimeout(() => {
        uploadProgress.value = 100;
        chatStore.addMessage({
          type: "image",
          url: e.target?.result as string,
          alt: pendingImage.value?.name,
          sender: "user",
        });
        clearInterval(progressInterval);
        removePendingImage();
      }, 500);
    };
    reader.readAsDataURL(pendingImage.value);
  } else {
    const content = messageInput.value.trim();
    if (!content) return;

    chatStore.addMessage({
      type: "text",
      content,
      sender: "user",
    });

    messageInput.value = "";
  }
};

onMounted(() => {
  document.addEventListener("paste", handlePaste);
});

onUnmounted(() => {
  document.removeEventListener("paste", handlePaste);
});
</script>

<template>
  <div
    class="space-y-4"
    @dragover.prevent="dragOver = true"
    @dragleave.prevent="dragOver = false"
    @drop="handleDrop"
  >
    <ImagePreview
      v-if="pendingImage"
      v-motion
      :file="pendingImage"
      :progress="uploadProgress"
      :on-remove="removePendingImage"
      :initial="{ scale: 0.8, opacity: 0 }"
      :enter="{ scale: 1, opacity: 1 }"
      :exit="{ scale: 0.8, opacity: 0 }"
    />

    <div
      :class="[
        'glass-panel rounded-full p-2 flex items-center gap-2',
        dragOver && 'ring-2 ring-primary',
      ]"
    >
      <input
        v-model="messageInput"
        type="text"
        placeholder="Type a message..."
        class="flex-1 bg-transparent border-none outline-none px-4 text-text placeholder:text-text/50"
        :disabled="!!pendingImage"
        @keyup.enter="!isTyping ? sendMessage() : null"
      >

      <input
        ref="fileInput"
        type="file"
        accept="image/jpeg,image/png,image/webp"
        class="hidden"
        @change="handleFileSelect"
      >

      <div class="relative group hidden md:block">
        <button
          class="p-2 rounded-full hover:bg-primary/20 transition-colors group"
          :disabled="!!pendingImage"
          @click="() => fileInput?.click()"
        >
          <template v-if="pendingImage">
            <!-- 3 Dots Loader -->
            <div class="flex gap-1 items-center justify-center w-5 h-5">
              <span
                class="w-1.5 h-1.5 bg-primary rounded-full animate-bounce [animation-delay:0ms]"
              />
              <span
                class="w-1.5 h-1.5 bg-primary rounded-full animate-bounce [animation-delay:150ms]"
              />
              <span
                class="w-1.5 h-1.5 bg-primary rounded-full animate-bounce [animation-delay:300ms]"
              />
            </div>
          </template>
          <template v-else>
            <ImagePlus
              class="w-5 h-5 text-text transition-all group-hover:opacity-70 group-hover:scale-110"
            />
          </template>
        </button>
        <!-- Tooltip -->
        <div
          class="absolute bottom-full mb-1 left-1/2 -translate-x-1/2 text-xs px-2 py-1 rounded bg-surface text-text opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none"
        >
          Upload Image
        </div>
      </div>

      <!-- ✉️ Send Icon OR Spinner -->
      <div class="relative group hidden md:block">
        <button
          class="p-2 rounded-full hover:bg-primary/20 transition-colors group"
          :disabled="(!messageInput.trim() && !pendingImage) || isTyping"
          @click="sendMessage"
        >
          <template v-if="isTyping">
            <!-- 3 Dots Loader -->
            <div class="flex gap-1 items-center justify-center w-5 h-5">
              <span
                class="w-1.5 h-1.5 bg-primary rounded-full animate-bounce [animation-delay:0ms]"
              />
              <span
                class="w-1.5 h-1.5 bg-primary rounded-full animate-bounce [animation-delay:150ms]"
              />
              <span
                class="w-1.5 h-1.5 bg-primary rounded-full animate-bounce [animation-delay:300ms]"
              />
            </div>
          </template>
          <template v-else>
            <SendIcon
              class="w-5 h-5 text-text transition-all"
              :class="[
                (!messageInput.trim() && !pendingImage) || isTyping
                  ? 'opacity-40 cursor-not-allowed'
                  : 'group-hover:opacity-70 group-hover:scale-110',
              ]"
            />
          </template>
        </button>
        <!-- Tooltip -->
        <div
          class="absolute bottom-full mb-1 left-1/2 -translate-x-1/2 text-xs px-2 py-1 rounded bg-surface text-text opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none"
        >
          Send Message
        </div>
      </div>
    </div>
  </div>
</template>
<style>
@keyframes bounce {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-3px);
  }
}

.animate-bounce {
  animation: bounce 0.8s infinite ease-in-out;
}
</style>

================================================================================
File: src\components\ScrollToBottomButton.vue
<script setup lang="ts">
import { ArrowDownIcon } from "lucide-vue-next";

defineProps<{
  onClick: () => void;
  show: boolean;
}>();
</script>

<template>
  <Transition name="fade">
    <button
      v-if="show"
      class="fixed bottom-24 left-1/2 -translate-x-1/2 glass-panel rounded-full p-2 hover:bg-primary/20 transition-all shadow-lg"
      @click="onClick"
    >
      <ArrowDownIcon class="w-5 h-5" />
    </button>
  </Transition>
</template>

<style scoped>
.fade-enter-active,
.fade-leave-active {
  transition:
    opacity 0.3s ease,
    transform 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
  transform: translate(-50%, 20px);
}
</style>

================================================================================
File: src\composables\useChatScroll.ts
import { onMounted, onUnmounted, ref } from "vue";

export const useChatScroll = () => {
  const showScrollButton = ref(false);
  const isAtBottom = ref(true);

  const checkScroll = () => {
    const scrollTop = window.scrollY;
    const scrollHeight = document.documentElement.scrollHeight;
    const clientHeight = window.innerHeight;
    const scrollPosition = scrollHeight - scrollTop - clientHeight;

    isAtBottom.value = scrollPosition < 100;
    showScrollButton.value = !isAtBottom.value;
  };

  const scrollToBottom = (smooth = true) => {
    window.scrollTo({
      top: document.documentElement.scrollHeight,
      behavior: smooth ? "smooth" : "auto",
    });
  };

  onMounted(() => {
    window.addEventListener("scroll", checkScroll);
    scrollToBottom(false);
  });

  onUnmounted(() => {
    window.removeEventListener("scroll", checkScroll);
  });

  return {
    showScrollButton,
    isAtBottom,
    scrollToBottom,
    checkScroll,
  };
};

================================================================================
File: src\composables\useClock.ts
import { computed, onMounted, onUnmounted, ref } from "vue";

const FORMAT_KEY = "clock-format";

export const useClock = () => {
  const now = ref(new Date());
  const use12h = ref(localStorage.getItem(FORMAT_KEY) === "12");

  const toggleFormat = () => {
    use12h.value = !use12h.value;
    localStorage.setItem(FORMAT_KEY, use12h.value ? "12" : "24");
  };

  let interval: number;

  onMounted(() => {
    interval = window.setInterval(() => {
      now.value = new Date();
    }, 1000);
  });

  onUnmounted(() => {
    clearInterval(interval);
  });

  const timeParts = computed(() => {
    const options: Intl.DateTimeFormatOptions = {
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: use12h.value,
    };
    return new Intl.DateTimeFormat("en-US", options).formatToParts(now.value);
  });

  const fullDate = computed(() => {
    return now.value.toLocaleDateString(undefined, {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  });

  return { timeParts, fullDate, use12h, toggleFormat };
};

================================================================================
File: src\composables\useTheme.ts
import { storeToRefs } from "pinia";
import { useThemeStore } from "../stores/themeStore";

export const useTheme = () => {
  const themeStore = useThemeStore();
  const { themeMode, resolvedTheme, isDark } = storeToRefs(themeStore);

  return {
    themeMode,
    resolvedTheme,
    isDark,
    cycleTheme: themeStore.cycleTheme,
  };
};

================================================================================
File: src\layouts\default.vue
<template>
  <v-main>
    <router-view />
  </v-main>

  <AppFooter />
</template>

<script lang="ts" setup>
  //
</script>

================================================================================
File: src\pages\ChatApp.vue
<script setup lang="ts">
import ChatWindow from "../components/ChatWindow.vue";
import { useTheme } from "../composables/useTheme";

const {  themeMode, cycleTheme } = useTheme();
</script>

<template>
  <div class="bg-background transition-colors duration-300">
    <button
      class="absolute top-4 right-4 z-50 p-2 glass-panel rounded-full hover:bg-primary/20 transition-colors hover:scale-105"
      @click="cycleTheme"
    >
      <span v-if="themeMode === 'light'">🌙</span>
      <span v-else-if="themeMode === 'dark'">☀️</span>
      <span v-else>💻</span>
    </button>

    <ChatWindow />
  </div>
</template>

================================================================================
File: src\pages\index.vue
<template>
  <HelloWorld />
</template>

<script lang="ts" setup>
//
</script>

================================================================================
File: src\plugins\index.ts
/**
 * plugins/index.ts
 *
 * Automatically included in `./src/main.ts`
 */

// Plugins
import router from '../router'
import pinia from '../stores'
import motion from './motion'
import vfm from './vfm'
import vuetify from './vuetify'

// Types
import type { App } from 'vue'

export function registerPlugins (app: App) {
  app
    .use(vuetify)
    .use(router)
    .use(pinia)
    .use(motion)
    .use(vfm)
}

================================================================================
File: src\plugins\motion.ts
import { MotionPlugin } from '@vueuse/motion'

export default MotionPlugin

================================================================================
File: src\plugins\vfm.ts
import { createVfm } from 'vue-final-modal'
import 'vue-final-modal/style.css'

export default createVfm()

================================================================================
File: src\plugins\vuetify.ts
/**
 * plugins/vuetify.ts
 *
 * Framework documentation: https://vuetifyjs.com`
 */

// Styles
import '@mdi/font/css/materialdesignicons.css'
import 'vuetify/styles'

// Composables
import { createVuetify } from 'vuetify'

// https://vuetifyjs.com/en/introduction/why-vuetify/#feature-guides
export default createVuetify({
  theme: {
    defaultTheme: 'dark',
  },
})

================================================================================
File: src\router\index.ts
/**
 * router/index.ts
 *
 * Automatic routes for `./src/pages/*.vue`
 */

// Composables
import { createRouter, createWebHistory } from 'vue-router/auto'
import { setupLayouts } from 'virtual:generated-layouts'
import { routes } from 'vue-router/auto-routes'

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: setupLayouts(routes),
})

// Workaround for https://github.com/vitejs/vite/issues/11804
router.onError((err, to) => {
  if (err?.message?.includes?.('Failed to fetch dynamically imported module')) {
    if (!localStorage.getItem('vuetify:dynamic-reload')) {
      console.log('Reloading page to fix dynamic import error')
      localStorage.setItem('vuetify:dynamic-reload', 'true')
      location.assign(to.fullPath)
    } else {
      console.error('Dynamic import error, reloading page did not fix it', err)
    }
  } else {
    console.error(err)
  }
})

router.isReady().then(() => {
  localStorage.removeItem('vuetify:dynamic-reload')
})

export default router

================================================================================
File: src\stores\app.ts
// Utilities
import { defineStore } from 'pinia'

export const useAppStore = defineStore('app', {
  state: () => ({
    //
  }),
})

================================================================================
File: src\stores\chatStore.ts
import { faker } from "@faker-js/faker";
import { defineStore } from "pinia";
import { computed, ref } from "vue";
import { createMessage } from "../helpers/chat";
import type { ChatState, Message, MessageInput } from "../types/chat";

export const useChatStore = defineStore("chat", () => {
  const state = ref<ChatState>({
    messages: [],
    isTyping: false,
  });

  const addMessage = (input: MessageInput) => {
    const newMessage = createMessage(input);
    state.value.messages.push(newMessage);

    setTimeout(() => {
      const msg = state.value.messages.find((m) => m.id === newMessage.id);
      if (msg) msg.status = "sent";
    }, 1000);

    if (input.sender === "user") {
      simulateAssistantReply(input);
    }
  };

  const simulateAssistantReply = (userInput: MessageInput) => {
    setTyping(true);

    setTimeout(() => {
      const isImageReply = userInput.type === "image" || Math.random() < 0.5;

      const reply: Message = isImageReply
        ? createMessage({
            type: "image",
            sender: "assistant",
            url: faker.image.urlLoremFlickr({
              category: "abstract",
              width: 600,
              height: 400,
            }),
            alt: "AI-generated image",
            thumbnail: faker.image.urlLoremFlickr({
              category: "abstract",
              width: 200,
              height: 200,
            }),
          })
        : createMessage({
            type: "text",
            sender: "assistant",
            content: `Echo: ${"content" in userInput ? userInput.content : "Here’s a visual response."}`,
          });

      state.value.messages.push(reply);
      setTyping(false);
    }, 1200);
  };

  const setTyping = (typing: boolean) => {
    state.value.isTyping = typing;
  };

  const messages = computed(() => state.value.messages);
  const isTyping = computed(() => state.value.isTyping);

  return {
    messages,
    isTyping,
    addMessage,
    setTyping,
  };
});

================================================================================
File: src\stores\index.ts
// Utilities
import { createPinia } from 'pinia'

export default createPinia()

================================================================================
File: src\stores\themeStore.ts
import { usePreferredDark, useStorage } from "@vueuse/core";
import { defineStore } from "pinia";
import { computed, ref, watch } from "vue";

export type ThemeMode = "light" | "dark" | "auto";

export const useThemeStore = defineStore("theme", () => {
  const systemPrefersDark = usePreferredDark(); // reactive system theme
  const themeMode = useStorage<ThemeMode>("theme-mode", "auto"); // persistent
  const isDark = ref<boolean>(false);

  // Computed actual theme in use
  const resolvedTheme = computed(() => {
    if (themeMode.value === "auto") {
      return systemPrefersDark.value ? "dark" : "light";
    }
    return themeMode.value;
  });

  // Apply class to <html>
  const applyTheme = () => {
    document.documentElement.classList.toggle("dark", isDark.value);
  };

  // Watch for resolved theme changes
  watch(
    resolvedTheme,
    (val) => {
      isDark.value = val === "dark";
      applyTheme();
    },
    { immediate: true }
  );

  // Manual toggle (light ↔ dark ↔ auto)
  const cycleTheme = () => {
    themeMode.value =
      themeMode.value === "light"
        ? "dark"
        : themeMode.value === "dark"
          ? "auto"
          : "light";
  };

  return {
    themeMode,
    resolvedTheme,
    isDark,
    cycleTheme,
  };
});

================================================================================
File: src\types\chat.ts
export type MessageType = "text" | "image";

export interface BaseMessage {
  id: string;
  sender: "user" | "assistant";
  timestamp: Date;
  status: "sending" | "sent" | "delivered" | "read";
}

export interface TextMessage extends BaseMessage {
  type: "text";
  content: string;
}

export interface ImageMessage extends BaseMessage {
  type: "image";
  url: string;
  alt?: string;
  thumbnail?: string;
  //content?: string;
}

export type Message = TextMessage | ImageMessage;

export interface ChatState {
  messages: Message[];
  isTyping: boolean;
}
export type MessageInput =
  | Omit<TextMessage, "id" | "timestamp" | "status">
  | Omit<ImageMessage, "id" | "timestamp" | "status">;

================================================================================
File: src\App.vue
<template>
  <v-app>
    <router-view />
  </v-app>
</template>

<script lang="ts" setup>
  //
</script>

================================================================================
File: src\auto-imports.d.ts
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const EffectScope: typeof import('vue')['EffectScope']
  const computed: typeof import('vue')['computed']
  const createApp: typeof import('vue')['createApp']
  const customRef: typeof import('vue')['customRef']
  const defineAsyncComponent: typeof import('vue')['defineAsyncComponent']
  const defineComponent: typeof import('vue')['defineComponent']
  const effectScope: typeof import('vue')['effectScope']
  const getCurrentInstance: typeof import('vue')['getCurrentInstance']
  const getCurrentScope: typeof import('vue')['getCurrentScope']
  const h: typeof import('vue')['h']
  const inject: typeof import('vue')['inject']
  const isProxy: typeof import('vue')['isProxy']
  const isReactive: typeof import('vue')['isReactive']
  const isReadonly: typeof import('vue')['isReadonly']
  const isRef: typeof import('vue')['isRef']
  const markRaw: typeof import('vue')['markRaw']
  const nextTick: typeof import('vue')['nextTick']
  const onActivated: typeof import('vue')['onActivated']
  const onBeforeMount: typeof import('vue')['onBeforeMount']
  const onBeforeRouteLeave: typeof import('vue-router')['onBeforeRouteLeave']
  const onBeforeRouteUpdate: typeof import('vue-router')['onBeforeRouteUpdate']
  const onBeforeUnmount: typeof import('vue')['onBeforeUnmount']
  const onBeforeUpdate: typeof import('vue')['onBeforeUpdate']
  const onDeactivated: typeof import('vue')['onDeactivated']
  const onErrorCaptured: typeof import('vue')['onErrorCaptured']
  const onMounted: typeof import('vue')['onMounted']
  const onRenderTracked: typeof import('vue')['onRenderTracked']
  const onRenderTriggered: typeof import('vue')['onRenderTriggered']
  const onScopeDispose: typeof import('vue')['onScopeDispose']
  const onServerPrefetch: typeof import('vue')['onServerPrefetch']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const onUpdated: typeof import('vue')['onUpdated']
  const onWatcherCleanup: typeof import('vue')['onWatcherCleanup']
  const provide: typeof import('vue')['provide']
  const reactive: typeof import('vue')['reactive']
  const readonly: typeof import('vue')['readonly']
  const ref: typeof import('vue')['ref']
  const resolveComponent: typeof import('vue')['resolveComponent']
  const shallowReactive: typeof import('vue')['shallowReactive']
  const shallowReadonly: typeof import('vue')['shallowReadonly']
  const shallowRef: typeof import('vue')['shallowRef']
  const toRaw: typeof import('vue')['toRaw']
  const toRef: typeof import('vue')['toRef']
  const toRefs: typeof import('vue')['toRefs']
  const toValue: typeof import('vue')['toValue']
  const triggerRef: typeof import('vue')['triggerRef']
  const unref: typeof import('vue')['unref']
  const useAttrs: typeof import('vue')['useAttrs']
  const useCssModule: typeof import('vue')['useCssModule']
  const useCssVars: typeof import('vue')['useCssVars']
  const useId: typeof import('vue')['useId']
  const useLink: typeof import('vue-router')['useLink']
  const useModel: typeof import('vue')['useModel']
  const useRoute: typeof import('vue-router/auto')['useRoute']
  const useRouter: typeof import('vue-router/auto')['useRouter']
  const useSlots: typeof import('vue')['useSlots']
  const useTemplateRef: typeof import('vue')['useTemplateRef']
  const watch: typeof import('vue')['watch']
  const watchEffect: typeof import('vue')['watchEffect']
  const watchPostEffect: typeof import('vue')['watchPostEffect']
  const watchSyncEffect: typeof import('vue')['watchSyncEffect']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Component, Slot, Slots, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from 'vue'
  import('vue')
}

// for vue template auto import
import { UnwrapRef } from 'vue'
declare module 'vue' {
  interface GlobalComponents {}
  interface ComponentCustomProperties {
    readonly EffectScope: UnwrapRef<typeof import('vue')['EffectScope']>
    readonly computed: UnwrapRef<typeof import('vue')['computed']>
    readonly createApp: UnwrapRef<typeof import('vue')['createApp']>
    readonly customRef: UnwrapRef<typeof import('vue')['customRef']>
    readonly defineAsyncComponent: UnwrapRef<typeof import('vue')['defineAsyncComponent']>
    readonly defineComponent: UnwrapRef<typeof import('vue')['defineComponent']>
    readonly effectScope: UnwrapRef<typeof import('vue')['effectScope']>
    readonly getCurrentInstance: UnwrapRef<typeof import('vue')['getCurrentInstance']>
    readonly getCurrentScope: UnwrapRef<typeof import('vue')['getCurrentScope']>
    readonly h: UnwrapRef<typeof import('vue')['h']>
    readonly inject: UnwrapRef<typeof import('vue')['inject']>
    readonly isProxy: UnwrapRef<typeof import('vue')['isProxy']>
    readonly isReactive: UnwrapRef<typeof import('vue')['isReactive']>
    readonly isReadonly: UnwrapRef<typeof import('vue')['isReadonly']>
    readonly isRef: UnwrapRef<typeof import('vue')['isRef']>
    readonly markRaw: UnwrapRef<typeof import('vue')['markRaw']>
    readonly nextTick: UnwrapRef<typeof import('vue')['nextTick']>
    readonly onActivated: UnwrapRef<typeof import('vue')['onActivated']>
    readonly onBeforeMount: UnwrapRef<typeof import('vue')['onBeforeMount']>
    readonly onBeforeUnmount: UnwrapRef<typeof import('vue')['onBeforeUnmount']>
    readonly onBeforeUpdate: UnwrapRef<typeof import('vue')['onBeforeUpdate']>
    readonly onDeactivated: UnwrapRef<typeof import('vue')['onDeactivated']>
    readonly onErrorCaptured: UnwrapRef<typeof import('vue')['onErrorCaptured']>
    readonly onMounted: UnwrapRef<typeof import('vue')['onMounted']>
    readonly onRenderTracked: UnwrapRef<typeof import('vue')['onRenderTracked']>
    readonly onRenderTriggered: UnwrapRef<typeof import('vue')['onRenderTriggered']>
    readonly onScopeDispose: UnwrapRef<typeof import('vue')['onScopeDispose']>
    readonly onServerPrefetch: UnwrapRef<typeof import('vue')['onServerPrefetch']>
    readonly onUnmounted: UnwrapRef<typeof import('vue')['onUnmounted']>
    readonly onUpdated: UnwrapRef<typeof import('vue')['onUpdated']>
    readonly onWatcherCleanup: UnwrapRef<typeof import('vue')['onWatcherCleanup']>
    readonly provide: UnwrapRef<typeof import('vue')['provide']>
    readonly reactive: UnwrapRef<typeof import('vue')['reactive']>
    readonly readonly: UnwrapRef<typeof import('vue')['readonly']>
    readonly ref: UnwrapRef<typeof import('vue')['ref']>
    readonly resolveComponent: UnwrapRef<typeof import('vue')['resolveComponent']>
    readonly shallowReactive: UnwrapRef<typeof import('vue')['shallowReactive']>
    readonly shallowReadonly: UnwrapRef<typeof import('vue')['shallowReadonly']>
    readonly shallowRef: UnwrapRef<typeof import('vue')['shallowRef']>
    readonly toRaw: UnwrapRef<typeof import('vue')['toRaw']>
    readonly toRef: UnwrapRef<typeof import('vue')['toRef']>
    readonly toRefs: UnwrapRef<typeof import('vue')['toRefs']>
    readonly toValue: UnwrapRef<typeof import('vue')['toValue']>
    readonly triggerRef: UnwrapRef<typeof import('vue')['triggerRef']>
    readonly unref: UnwrapRef<typeof import('vue')['unref']>
    readonly useAttrs: UnwrapRef<typeof import('vue')['useAttrs']>
    readonly useCssModule: UnwrapRef<typeof import('vue')['useCssModule']>
    readonly useCssVars: UnwrapRef<typeof import('vue')['useCssVars']>
    readonly useId: UnwrapRef<typeof import('vue')['useId']>
    readonly useModel: UnwrapRef<typeof import('vue')['useModel']>
    readonly useRoute: UnwrapRef<typeof import('vue-router/auto')['useRoute']>
    readonly useRouter: UnwrapRef<typeof import('vue-router/auto')['useRouter']>
    readonly useSlots: UnwrapRef<typeof import('vue')['useSlots']>
    readonly useTemplateRef: UnwrapRef<typeof import('vue')['useTemplateRef']>
    readonly watch: UnwrapRef<typeof import('vue')['watch']>
    readonly watchEffect: UnwrapRef<typeof import('vue')['watchEffect']>
    readonly watchPostEffect: UnwrapRef<typeof import('vue')['watchPostEffect']>
    readonly watchSyncEffect: UnwrapRef<typeof import('vue')['watchSyncEffect']>
  }
}
================================================================================
File: src\components.d.ts
/* eslint-disable */
// @ts-nocheck
// Generated by unplugin-vue-components
// Read more: https://github.com/vuejs/core/pull/3399
// biome-ignore lint: disable
export {}

/* prettier-ignore */
declare module 'vue' {
  export interface GlobalComponents {
    AppFooter: typeof import('./components/AppFooter.vue')['default']
    ChatMessage: typeof import('./components/ChatMessage.vue')['default']
    ChatWindow: typeof import('./components/ChatWindow.vue')['default']
    ClockDisplay: typeof import('./components/ClockDisplay.vue')['default']
    HelloWorld: typeof import('./components/HelloWorld.vue')['default']
    HoverImage: typeof import('./components/HoverImage.vue')['default']
    ImageModal: typeof import('./components/ImageModal.vue')['default']
    ImagePreview: typeof import('./components/ImagePreview.vue')['default']
    MessageInput: typeof import('./components/MessageInput.vue')['default']
    RouterLink: typeof import('vue-router')['RouterLink']
    RouterView: typeof import('vue-router')['RouterView']
    ScrollToBottomButton: typeof import('./components/ScrollToBottomButton.vue')['default']
    Sidebar: typeof import('./components/SidebarChat.vue')['default']
    SidebarChat: typeof import('./components/SidebarChat.vue')['default']
  }
}

================================================================================
File: src\main.ts
/**
 * main.ts
 *
 * Bootstraps Vuetify and other plugins then mounts the App`
 */

// Plugins
import { registerPlugins } from '@/plugins';

// Components
import App from './App.vue';
import "./styles/style.css";
// Composables
import { createApp } from 'vue';

const app = createApp(App)

registerPlugins(app)

app.mount('#app')

================================================================================
File: src\typed-router.d.ts
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/ChatApp': RouteRecordInfo<'/ChatApp', '/ChatApp', Record<never, never>, Record<never, never>>,
  }
}

================================================================================
